{"version":3,"sources":["components/info.js","components/form.js","components/weather.js","App.js","reportWebVitals.js","index.js"],"names":["Info","Form","props","onSubmit","weatherMethod","type","name","placeholder","Weather","temp","city","country","feelsLike","sunset","error","className","App","useState","undefined","setTemp","setCity","setCountry","setFeelsLike","setSunset","setError","gettingApi","useCallback","e","a","preventDefault","target","elements","value","fetch","then","json","data","cod","sys","timeSunset","Date","setTime","sunsetTime","getHours","getMinutes","getSeconds","main","feels_like","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2PASeA,EAPF,kBACL,gCACI,iDACA,oECcGC,EAjBF,SAAAC,GAAK,OACd,uBAAMC,SAAUD,EAAME,cAAtB,UACI,uBAAOC,KAAK,OAAOC,KAAK,OAAOC,YAAY,oBAC3C,qDCgBOC,EAnBC,SAAAN,GAAU,IAEfO,EAAiDP,EAAjDO,KAAMC,EAA2CR,EAA3CQ,KAAMC,EAAqCT,EAArCS,QAASC,EAA4BV,EAA5BU,UAAWC,EAAiBX,EAAjBW,OAAQC,EAASZ,EAATY,MAE/C,OACI,sBAAKC,UAAU,cAAf,UACKL,IAASI,GACV,gCACI,2CAAcJ,EAAd,KAAsBC,EAAtB,OACA,8CAAiBF,KACjB,6CAAgBG,KAChB,yCAAYC,QAGhB,oBAAGE,UAAU,QAAb,cAAuBD,EAAvB,WC+EGE,EAxFH,WAAO,IAAD,EACUC,wBAASC,GADnB,mBACPT,EADO,KACDU,EADC,OAEUF,wBAASC,GAFnB,mBAEPR,EAFO,KAEDU,EAFC,OAGgBH,wBAASC,GAHzB,mBAGPP,EAHO,KAGEU,EAHF,OAIoBJ,wBAASC,GAJ7B,mBAIPN,EAJO,KAIIU,EAJJ,OAKcL,wBAASC,GALvB,mBAKPL,EALO,KAKCU,EALD,OAMUN,mBAAS,CAACJ,YAAQK,IAN5B,gCAOYD,wBAASC,IAPrB,mBAOPJ,EAPO,KAOAU,EAPA,KAURC,EAAaC,sBAAW,uCAAE,WAAOC,GAAP,uBAAAC,EAAA,yDAC5BD,EAAEE,mBACInB,EAAOiB,EAAEG,OAAOC,SAASrB,KAAKsB,OAFR,gCAKLC,MAAM,qDAAD,OACiCvB,EADjC,kBAjBpB,mCAiBoB,kBAEnBwB,MAAK,SAAAF,GAAK,OAAIA,EAAMG,UAPD,OAUN,OAAV,QALFC,EALkB,cAUhB,IAAJA,OAAA,EAAAA,EAAMC,MAGFxB,EAASuB,EAAKE,IAAIzB,QAClB0B,EAAa,IAAIC,MACVC,QAAQ5B,GACf6B,EANe,UAMCH,EAAWI,WANZ,YAM0BJ,EACxCK,aAPc,YAOEL,EAAWM,cAGhC1B,EAAQiB,EAAKU,KAAKrC,MAClBW,EAAQgB,EAAK9B,MACbe,EAAWe,EAAKE,IAAI3B,SACpBW,EAAac,EAAKU,KAAKC,YACvBxB,EAAUmB,GACVlB,OAASN,KAGTC,OAAQD,GACRE,OAAQF,GACRG,OAAWH,GACXI,OAAaJ,GACbK,OAAUL,GACVM,EAAS,8DAjCW,uBAuCxBL,OAAQD,GACRE,OAAQF,GACRG,OAAWH,GACXI,OAAaJ,GACbK,OAAUL,GACVM,EAAS,6BA5Ce,4CAAF,sDA8C3B,IAEH,OACI,qBAAKT,UAAU,UAAf,SACI,qBAAKA,UAAU,OAAf,SACI,qBAAKA,UAAU,YAAf,SACI,sBAAKA,UAAU,MAAf,UAEI,qBAAKA,UAAU,gBAAf,SACI,cAAC,EAAD,MAGJ,sBAAKA,UAAU,gBAAf,UACI,cAAC,EAAD,CAAMX,cAAeqB,IACrB,cAAC,EAAD,CACIhB,KAAMA,EACNC,KAAMA,EACNC,QAASA,EACTC,UAAWA,EACXC,OAAQA,EACRC,MAAOA,iBCvExBkC,G,YAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,QCCdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.e44df32b.chunk.js","sourcesContent":["import React from 'react';\n\nconst Info = () => (\n        <div>\n            <h2>Weather checker</h2>\n            <p>Check the weather in your city!</p>\n        </div>\n    );\n\nexport default Info;\n","import React from 'react';\n\nconst Form = props => (\n    <form onSubmit={props.weatherMethod}>\n        <input type=\"text\" name=\"city\" placeholder=\"Enter your city\"/>\n        <button>Get weather</button>\n    </form>\n)\n/*class Form extends React.Component {\n    render() {\n        return (\n            <form onSubmit={this.props.weatherMethod}>\n                <input type=\"text\" name=\"city\" placeholder=\"City\"/>\n                <button>Get weather</button>\n            </form>\n        );\n    }\n}*/\n\nexport default Form;\n","import React from 'react';\n\nconst Weather = props => {\n\n    const {temp, city, country, feelsLike, sunset, error} = props;\n\n    return (\n        <div className=\"infoWeather\">\n            {city && !error &&\n            <div>\n                <p>Location: {city}, {country} </p>\n                <p>Temperature: {temp}</p>\n                <p>Feels like: {feelsLike}</p>\n                <p>Sunset: {sunset}</p>\n            </div>\n            }\n            <p className=\"error\"> {error} </p>\n        </div>\n    );\n}\n\nexport default Weather;\n","import React, {useCallback, useState} from 'react';\nimport Info from \"./components/info\";\nimport Form from \"./components/form\";\nimport Weather from \"./components/weather\";\n\nconst API_KEY = \"0359602e6a87b3982ec17d3fd4cdb83f\";\n\nconst App = () => {\n    const [temp, setTemp] = useState(undefined);\n    const [city, setCity] = useState(undefined);\n    const [country, setCountry] = useState(undefined);\n    const [feelsLike, setFeelsLike] = useState(undefined);\n    const [sunset, setSunset] = useState(undefined);\n    const [data, setData] = useState({sunset: undefined, });\n    const [error, setError] = useState(undefined);\n\n\n    const gettingApi = useCallback( async (e) => {\n        e.preventDefault();\n        const city = e.target.elements.city.value;\n\n        if (city) {\n            const data = await fetch(\n                `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}&units=metric`)\n                .then(value => value.json());\n\n            // to check if the city name is correct\n            if (data?.cod === 200) { // data && data.cod\n\n                // transform sunset time\n                let sunset = data.sys.sunset;\n                let timeSunset = new Date();\n                timeSunset.setTime(sunset);\n                let sunsetTime = `${timeSunset.getHours()}:${timeSunset\n                    .getMinutes()}:${timeSunset.getSeconds()}`;\n\n                // get data from the city that user typed\n                setTemp(data.main.temp);\n                setCity(data.name);\n                setCountry(data.sys.country);\n                setFeelsLike(data.main.feels_like);\n                setSunset(sunsetTime);\n                setError(undefined);\n\n            } else {\n                setTemp(undefined);\n                setCity(undefined);\n                setCountry(undefined);\n                setFeelsLike(undefined);\n                setSunset(undefined);\n                setError('City not found. ' +\n                    'Please check the city name and try again.');\n            }\n\n        } else {\n            // error state if no city typed\n            setTemp(undefined);\n            setCity(undefined);\n            setCountry(undefined);\n            setFeelsLike(undefined);\n            setSunset(undefined);\n            setError('Please type the city name');\n        }\n    }, [])\n\n    return (\n        <div className=\"wrapper\">\n            <div className=\"main\">\n                <div className=\"container\">\n                    <div className=\"row\">\n\n                        <div className=\"col-sm-5 info\">\n                            <Info/>\n                        </div>\n\n                        <div className=\"col-sm-7 form\">\n                            <Form weatherMethod={gettingApi}/>\n                            <Weather\n                                temp={temp}\n                                city={city}\n                                country={country}\n                                feelsLike={feelsLike}\n                                sunset={sunset}\n                                error={error}\n                            />\n                        </div>\n\n                    </div>\n                </div>\n\n            </div>\n        </div>\n    );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}