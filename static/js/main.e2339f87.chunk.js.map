{"version":3,"sources":["components/info.js","components/form.js","components/weather.js","App.js","reportWebVitals.js","index.js"],"names":["Info","React","Component","Form","props","onSubmit","weatherMethod","type","name","placeholder","Weather","className","this","city","error","country","temp","feelsLike","sunset","API_KEY","App","state","undefined","gettingApi","e","a","preventDefault","target","elements","value","fetch","api_url","json","data","cod","sys","timeSunset","Date","setTime","sunsetTime","getHours","getMinutes","getSeconds","setState","main","feels_like","sunrise","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gRAaeA,E,4JAVX,WACI,OACI,gCACI,iDACA,uE,GALGC,IAAMC,WCkBVC,EAjBF,SAAAC,GAAK,OACd,uBAAMC,SAAUD,EAAME,cAAtB,UACI,uBAAOC,KAAK,OAAOC,KAAK,OAAOC,YAAY,oBAC3C,qDCcOC,E,4JAjBX,WACI,OACI,sBAAKC,UAAU,cAAf,UACKC,KAAKR,MAAMS,OAASD,KAAKR,MAAMU,OAChC,gCACI,2CAAcF,KAAKR,MAAMS,KAAzB,KAAiCD,KAAKR,MAAMW,QAA5C,OACA,8CAAiBH,KAAKR,MAAMY,QAC5B,6CAAgBJ,KAAKR,MAAMa,aAC3B,yCAAYL,KAAKR,MAAMc,aAG3B,oBAAGP,UAAU,QAAb,cAAuBC,KAAKR,MAAMU,MAAlC,c,GAZMb,IAAMC,WCGtBiB,EAAU,mCAwGDC,E,4MAnGXC,MAAQ,CACJL,UAAMM,EACNT,UAAMS,EACNP,aAASO,EACTL,eAAWK,EACXJ,YAAQI,EACRR,WAAOQ,G,EAGXC,W,uCAAa,WAAOC,GAAP,yBAAAC,EAAA,yDACTD,EAAEE,mBACIb,EAAOW,EAAEG,OAAOC,SAASf,KAAKgB,OAF3B,iCAMDC,MAAM,qDAAD,OAAsDjB,EAAtD,kBAAoEM,EAApE,kBANJ,cAKCY,EALD,gBAOcA,EAAQC,OAPtB,OAUa,OAAV,QAHFC,EAPD,cAUG,IAAJA,OAAA,EAAAA,EAAMC,MASFhB,EAASe,EAAKE,IAAIjB,QAClBkB,EAAa,IAAIC,MACVC,QAAQpB,GACfqB,EAZe,UAYCH,EAAWI,WAZZ,YAY0BJ,EAAWK,aAZrC,YAYqDL,EAAWM,cAGnF,EAAKC,SAAS,CACV3B,KAAMiB,EAAKW,KAAK5B,KAChBH,KAAMoB,EAAKzB,KACXO,QAASkB,EAAKE,IAAIpB,QAClBE,UAAWgB,EAAKW,KAAKC,WACrB3B,OAAQqB,EACRzB,WAAOQ,KAGX,EAAKqB,SAAS,CACV3B,UAAMM,EACNT,UAAMS,EACNP,aAASO,EACTwB,aAASxB,EACTJ,YAAQI,EACRR,MAAO,mBAxCV,wBA8CL,EAAK6B,SAAS,CACV3B,UAAMM,EACNT,UAAMS,EACNP,aAASO,EACTwB,aAASxB,EACTJ,YAAQI,EACRR,MAAO,uBApDN,4C,kGAyDb,WACI,OACI,qBAAKH,UAAU,UAAf,SACI,qBAAKA,UAAU,OAAf,SAEI,qBAAKA,UAAU,YAAf,SACI,sBAAKA,UAAU,MAAf,UAEI,qBAAKA,UAAU,gBAAf,SACI,cAAC,EAAD,MAGJ,sBAAKA,UAAU,gBAAf,UACI,cAAC,EAAD,CAAML,cAAeM,KAAKW,aAC1B,cAAC,EAAD,CACIP,KAAMJ,KAAKS,MAAML,KACjBH,KAAMD,KAAKS,MAAMR,KACjBE,QAASH,KAAKS,MAAMN,QACpBE,UAAWL,KAAKS,MAAMJ,UACtBC,OAAQN,KAAKS,MAAMH,OACnBJ,MAAOF,KAAKS,MAAMP,wB,GAzFpCb,IAAMC,WCKT6C,G,YAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,QCCdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.e2339f87.chunk.js","sourcesContent":["import React from 'react';\n\nclass Info extends React.Component {\n    render() {\n        return (\n            <div>\n                <h2>Weather checker</h2>\n                <p>Check the weather in your city!</p>\n            </div>\n        );\n    }\n}\n\nexport default Info;\n","import React from 'react';\n\n// another version of creating a component\nconst Form = props => (\n    <form onSubmit={props.weatherMethod}>\n        <input type=\"text\" name=\"city\" placeholder=\"Enter your city\"/>\n        <button>Get weather</button>\n    </form>\n)\n/*class Form extends React.Component {\n    render() {\n        return (\n            <form onSubmit={this.props.weatherMethod}>\n                <input type=\"text\" name=\"city\" placeholder=\"City\"/>\n                <button>Get weather</button>\n            </form>\n        );\n    }\n}*/\n\nexport default Form;\n","import React from 'react';\n\nclass Weather extends React.Component {\n    render() {\n        return (\n            <div className=\"infoWeather\">\n                {this.props.city && !this.props.error &&\n                <div>\n                    <p>Location: {this.props.city}, {this.props.country} </p>\n                    <p>Temperature: {this.props.temp}</p>\n                    <p>Feels like: {this.props.feelsLike}</p>\n                    <p>Sunset: {this.props.sunset}</p>\n                </div>\n                }\n                <p className=\"error\"> {this.props.error} </p>\n            </div>\n        );\n    }\n}\n\nexport default Weather;\n","import React from 'react';\nimport Info from \"./components/info\";\nimport Form from \"./components/form\";\nimport Weather from \"./components/weather\";\n\nconst API_KEY = \"0359602e6a87b3982ec17d3fd4cdb83f\";\n\nclass App extends React.Component {\n\n    // no data before user types the city name\n    state = {\n        temp: undefined,\n        city: undefined,\n        country: undefined,\n        feelsLike: undefined,\n        sunset: undefined,\n        error: undefined\n    }\n\n    gettingApi = async (e) => {\n        e.preventDefault();\n        const city = e.target.elements.city.value;\n\n        if (city) {\n            const api_url = await\n                fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}&units=metric`);\n            const data = await api_url.json();\n\n            // to check if the city name is correct\n            if (data?.cod === 200) { // data && data.cod\n\n                /*let sunrise = data.sys.sunrise;\n                let timeSunrise = new Date(sunrise);\n                // timeSunrise.setTime(sunrise);\n                console.log('----SUNRISE----', sunrise, timeSunrise)\n                let sunriseTime = `${timeSunrise.getHours()}:${timeSunrise.getMinutes()}:${timeSunrise.getSeconds()}`;*/\n\n                // transform sunset time\n                let sunset = data.sys.sunset;\n                let timeSunset = new Date();\n                timeSunset.setTime(sunset);\n                let sunsetTime = `${timeSunset.getHours()}:${timeSunset.getMinutes()}:${timeSunset.getSeconds()}`;\n\n                // get data from the city user typed\n                this.setState({\n                    temp: data.main.temp,\n                    city: data.name,\n                    country: data.sys.country,\n                    feelsLike: data.main.feels_like,\n                    sunset: sunsetTime,\n                    error: undefined\n                });\n            } else {\n                this.setState({\n                    temp: undefined,\n                    city: undefined,\n                    country: undefined,\n                    sunrise: undefined,\n                    sunset: undefined,\n                    error: 'City not found'\n                });\n            }\n\n        } else {\n            // error state if no city typed\n            this.setState({\n                temp: undefined,\n                city: undefined,\n                country: undefined,\n                sunrise: undefined,\n                sunset: undefined,\n                error: \"Type the city name\"\n            })\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"wrapper\">\n                <div className=\"main\">\n\n                    <div className=\"container\">\n                        <div className=\"row\">\n\n                            <div className=\"col-sm-5 info\">\n                                <Info/>\n                            </div>\n\n                            <div className=\"col-sm-7 form\">\n                                <Form weatherMethod={this.gettingApi}/>\n                                <Weather\n                                    temp={this.state.temp}\n                                    city={this.state.city}\n                                    country={this.state.country}\n                                    feelsLike={this.state.feelsLike}\n                                    sunset={this.state.sunset}\n                                    error={this.state.error}\n                                />\n                            </div>\n\n                        </div>\n                    </div>\n\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}