{"version":3,"sources":["components/info.js","components/form.js","components/weather.js","data/weather-fetch.js","App.js","reportWebVitals.js","index.js"],"names":["Info","Form","onSubmit","type","name","placeholder","Weather","props","data","temp","city","country","feelsLike","description","error","className","map","el","join","getWeatherData","a","fetch","then","value","json","cod","main","sys","feels_like","weather","undefined","App","useState","dataState","setDataState","errorState","setErrorState","onFormSubmit","useCallback","e","preventDefault","target","elements","cityInput","nextWeatherData","nextError","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2PASeA,EAPF,kBACX,gCACE,iDACA,oECIWC,EAPF,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACX,uBAAMA,SAAUA,EAAhB,UACE,uBAAOC,KAAK,OAAOC,KAAK,YAAYC,YAAY,oBAChD,qDCuBWC,EA1BC,SAACC,GAAW,IAAD,EAIrBA,EAFFC,KAAQC,EAFe,EAEfA,KAAMC,EAFS,EAETA,KAAMC,EAFG,EAEHA,QAASC,EAFN,EAEMA,UAAWC,EAFjB,EAEiBA,YACxCC,EACEP,EADFO,MAGF,OACE,sBAAKC,UAAU,cAAf,UACGL,IAASI,GACR,gCACE,2CACaJ,EADb,KACqBC,KAErB,8CAAiBF,KACjB,6CAAgBG,KAChB,iDACmB,IADnB,OAEGC,QAFH,IAEGA,OAFH,EAEGA,EAAaG,KAAI,SAACC,GAAD,OAAQA,EAAGJ,eAAaK,KAAK,WAIpDJ,GAAS,oBAAGC,UAAU,QAAb,cAAuBD,EAAvB,WCrBHK,EAAc,uCAAG,WAAOT,GAAP,eAAAU,EAAA,0DACxBV,EADwB,iCAEPW,MAAM,qDAAD,OAC+BX,EAD/B,kBAJZ,mCAIY,kBAEtBY,MAAK,SAACC,GAAD,OAAWA,EAAMC,UAJE,UAQR,OAAV,QANFhB,EAFoB,cAQlB,IAAJA,OAAA,EAAAA,EAAMiB,KARgB,yCAUjB,CACLjB,KAAM,CACJC,KAAMD,EAAKkB,KAAKjB,KAChBC,KAAMF,EAAKJ,KACXO,QAASH,EAAKmB,IAAIhB,QAClBC,UAAWJ,EAAKkB,KAAKE,WACrBf,YAAaL,EAAKqB,SAEpBf,WAAOgB,IAlBe,gCAqBjB,CACLtB,KAAM,GACNM,MAAM,8DAvBgB,wDA2BnB,CAAEN,KAAM,GAAIM,MAAO,8BA3BA,4CAAH,sDCsCZiB,EAlCH,WAAO,IAAD,EACkBC,mBAAS,IAD3B,mBACTC,EADS,KACEC,EADF,OAEoBF,wBAASF,GAF7B,mBAETK,EAFS,KAEGC,EAFH,KAIVC,EAAeC,sBAAW,uCAAC,WAAOC,GAAP,qBAAAnB,EAAA,6DAC/BmB,EAAEC,iBACI9B,EAAO6B,EAAEE,OAAOC,SAASC,UAAUpB,MAFV,SAG2BJ,EACxDT,GAJ6B,gBAGjBkC,EAHiB,EAGvBpC,KAA8BqC,EAHP,EAGA/B,MAI/BoB,EAAaU,GACbR,EAAcS,GARiB,2CAAD,sDAS7B,IAEH,OACE,qBAAK9B,UAAU,UAAf,SACE,qBAAKA,UAAU,OAAf,SACE,qBAAKA,UAAU,YAAf,SACE,sBAAKA,UAAU,MAAf,UACE,qBAAKA,UAAU,gBAAf,SACE,cAAC,EAAD,MAEF,sBAAKA,UAAU,gBAAf,UACE,cAAC,EAAD,CAAMb,SAAUmC,IAChB,cAAC,EAAD,CAAS7B,KAAMyB,EAAWnB,MAAOqB,iBCnBhCW,G,YAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqB1B,MAAK,YAAkD,IAA/C2B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,QCCdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.689ca51b.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Info = () => (\n  <div>\n    <h2>Weather checker</h2>\n    <p>Check the weather in your city!</p>\n  </div>\n);\n\nexport default Info;\n","import React from \"react\";\n\nconst Form = ({ onSubmit }) => (\n  <form onSubmit={onSubmit}>\n    <input type=\"text\" name=\"cityInput\" placeholder=\"Enter your city\" />\n    <button>Get weather</button>\n  </form>\n);\n\nexport default Form;\n","import React from \"react\";\n\nconst Weather = (props) => {\n  const {\n    data: { temp, city, country, feelsLike, description },\n    error,\n  } = props;\n\n  return (\n    <div className=\"infoWeather\">\n      {city && !error && (\n        <div>\n          <p>\n            Location: {city}, {country}\n          </p>\n          <p>Temperature: {temp}</p>\n          <p>Feels like: {feelsLike}</p>\n          <p>\n            Weather details:{\" \"}\n            {description?.map((el) => el.description).join(\",\")}\n          </p>\n        </div>\n      )}\n      {error && <p className=\"error\"> {error} </p>}\n    </div>\n  );\n};\n\nexport default Weather;\n","const API_KEY = \"0359602e6a87b3982ec17d3fd4cdb83f\";\n\nexport const getWeatherData = async (city) => {\n  if (city) {\n    const data = await fetch(\n      `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}&units=metric`\n    ).then((value) => value.json());\n\n    // to check if the city name is correct\n    // data && data.cod\n    if (data?.cod === 200) {\n      // get data from the city that user typed\n      return {\n        data: {\n          temp: data.main.temp,\n          city: data.name,\n          country: data.sys.country,\n          feelsLike: data.main.feels_like,\n          description: data.weather,\n        },\n        error: undefined,\n      };\n    } else {\n      return {\n        data: {},\n        error: `City not found. Please check the city name and try again.`,\n      };\n    }\n  } else {\n    return { data: {}, error: \"Please type the city name\" };\n  }\n};\n\nexport default 90;\n","import React, { useCallback, useState } from \"react\";\nimport Info from \"./components/info\";\nimport Form from \"./components/form\";\nimport Weather from \"./components/weather\";\nimport { getWeatherData } from \"./data/weather-fetch\";\n\nconst App = () => {\n  const [dataState, setDataState] = useState({});\n  const [errorState, setErrorState] = useState(undefined);\n\n  const onFormSubmit = useCallback(async (e) => {\n    e.preventDefault();\n    const city = e.target.elements.cityInput.value;\n    const { data: nextWeatherData, error: nextError } = await getWeatherData(\n      city\n    );\n\n    setDataState(nextWeatherData);\n    setErrorState(nextError);\n  }, []);\n\n  return (\n    <div className=\"wrapper\">\n      <div className=\"main\">\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col-sm-5 info\">\n              <Info />\n            </div>\n            <div className=\"col-sm-7 form\">\n              <Form onSubmit={onFormSubmit} />\n              <Weather data={dataState} error={errorState} />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}